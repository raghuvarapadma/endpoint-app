{"version":3,"sources":["components/header.js","components/footer.js","data/endpoints/api.js","App.js","data/markdown/app_background.js","index.js"],"names":["Header","className","to","Footer","Date","getFullYear","getAllNBATeams","setTeams","a","axios","get","then","res","data","success","catch","e","message","getPlayer","setImageURL","name","console","log","name_arr","split","url","App","useState","teams","setName","imageURL","useEffect","id","source","Form","Group","controlId","FormControl","placeholder","onChange","preventDefault","target","value","InputGroup","Append","Button","onClick","type","variant","src","map","team","idx","full_name","abbreviation","conference","division","Index","path","component","ReactDOM","render","document","getElementById"],"mappings":"mMAeeA,EAZA,kBACb,wBAAQC,UAAU,WAAlB,SACE,8BACE,8BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SACE,oBAAID,UAAU,aAAd,gCCEKE,EARA,WACb,OACE,qBAAKF,UAAU,SAAf,SACE,4CAAW,IAAIG,MAAOC,cAAtB,uB,mGC0BOC,EAAc,uCAAG,WAAOC,GAAP,SAAAC,EAAA,4DAChB,0CADgB,kBAErBC,IACJC,IAFS,2CAGTC,MAAK,SAACC,GAEL,OADAL,EAASK,EAAIC,MACN,CAACA,KAAMD,EAAIC,KAAMC,SAAS,MAElCC,OAAM,SAACC,GACN,MAAO,CAACF,SAAS,EAAOG,QAASD,EAAEC,aATX,2CAAH,sDAadC,EAAS,uCAAG,WAAOC,EAAaC,GAApB,iBAAAZ,EAAA,6DACvBa,QAAQC,IAAI,sCACRC,EAAWH,EAAKI,MAAM,KAC1BH,QAAQC,IAAI,aAAcC,EAAS,IACnCF,QAAQC,IAAI,YAAaC,EAAS,IAC5BE,EALiB,oDAKkCF,EAAS,GAL3C,YAKiDA,EAAS,IACjFF,QAAQC,IAAIG,GANW,kBAOhBhB,IACJC,IAAIe,GACJd,MAAK,SAACC,GAGL,OAFAO,EAAYM,GACZJ,QAAQC,IAAIV,EAAIC,MACT,CAACA,KAAMD,EAAIC,KAAMC,SAAS,MAElCC,OAAM,SAACC,GAEN,OADAK,QAAQC,IAAI,QAASN,GACd,CAACF,SAAS,EAAOG,QAASD,EAAEC,aAhBhB,2CAAH,wDCyHPS,EAxJH,WAAM,MAEUC,mBAAS,MAFnB,mBAETC,EAFS,KAEFrB,EAFE,OAGQoB,mBAAS,IAHjB,mBAGTP,EAHS,KAGHS,EAHG,OAIgBF,mBAAS,IAJzB,mBAITG,EAJS,KAICX,EAJD,KAmBhBY,qBAAU,WACHH,GAEHtB,EAAeC,KAGhB,CAACqB,IA2DJ,OACE,qBAAK3B,UAAU,OAAf,SACE,sBAAK+B,GAAG,UAAR,UACE,cAAC,IAAD,CAAe/B,UAAU,aAAagC,OCpG1B,4FDsGZ,qBAAKhC,UAAU,gCAAf,SACE,cAACiC,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,oCAAtB,UAME,cAACC,EAAA,EAAD,CAAaC,YAAa,uBAAyBC,SAhE5C,SAACvB,GAClBA,EAAEwB,iBACFX,EAAQb,EAAEyB,OAAOC,UA+DP,cAACC,EAAA,EAAWC,OAAZ,CAAmB3C,UAAU,6BAA7B,SAKE,cAAC4C,EAAA,EAAD,CAAQC,QA5EL,SAAC9B,GAChBA,EAAEwB,iBACFnB,QAAQC,IAAI,UACZJ,EAAUC,EAAaC,IAyEgB2B,KAAM,SAAUC,QAAQ,SAAnD,8CAMR,qBAAK/C,UAAU,gCAAf,SACgB,KAAb6B,EACC,qBAAKmB,IAAKnB,IAEV,6CAIJ,qBAAK7B,UAAU,YAAf,SAOE,qBAAKA,UAAU,gCAAf,SAOG2B,EACCA,EAAMf,KAAKqC,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKnD,UAAU,kBAAf,UACE,qBAAIA,UAAU,OAAd,UAAsBkD,EAAKE,UAA3B,KAAwCF,EAAKG,aAA7C,OACA,sBAAKrD,UAAU,cAAf,yBACekD,EAAKI,WAClB,uBAFF,aAGaJ,EAAKK,cALkBJ,MAUxC,qDElJRK,G,cAAQ,kBACZ,qBAAKxD,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,8BACE,cAAC,IAAD,CAAOyD,KAAK,IAAIC,UAAWjC,MAE7B,cAAC,EAAD,WAKNkC,IAASC,OAAO,cAAC,EAAD,IAAWC,SAASC,eAAe,W","file":"static/js/main.648baa69.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Header = () => (\n  <header className=\"masthead\">\n    <div>\n      <div>\n        <Link to=\"/\">\n          <h1 className=\"site-title\">NBA Teams</h1>\n        </Link>\n      </div>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <footer>Â© {new Date().getFullYear()} - Raghu Padma</footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import axios from \"axios\";\n\n// a function that grabs all avatar characters pics! FEEL FREE TO DELETE THIS FUNCTION\nexport const getAllAvatarCharacters = async (setCharacters) => {\n  let example_var = \"\";\n  // here's an example of what adding a variable to a string looks like\n  // in this case it's empty, but imagine inserting different types of strings / numbers to grab different types of data\n  // check the documentation of your API to see the formating of the endpoint & which vars it can take!\n  const url = `https://last-airbender-api.herokuapp.com/api/v1/characters/${example_var}`;\n  return axios\n    .get(url)\n    .then((res) => {\n      setCharacters(res.data);\n      // you don't have to return anything! this model would be good if you weren't passing the function as a param\n      // this would return an object saying the axios call was successful! (good for a success popup notification)\n      return { data: res.data, success: true };\n    })\n    .catch((e) => {\n      // if there is a failure, I return a custom object saying success is false, with the error message\n      // you don't have to do this! you could simply console.log(e)\n      return { success: false, message: e.message };\n    });\n};\n\n/**\n * TODO: define your own async function that uses Axios with a .then() & .catch() block\n * - it should at minimum take a function parameter\n * - inside your then block, try console.log(res.data) to see what is printed when your axios call succeeds\n * - from there, decide what part of res.data to pass to your function parameter (in this case, I passed the entire thing!)\n * - I also deleted my custom CSS from the index.css file so feel free to have fun & play around with the look of your app!\n */\nexport const getAllNBATeams = async (setTeams) => {\n  const url = 'https://www.balldontlie.io/api/v1/teams';\n  return axios\n    .get(url)\n    .then((res) => {\n      setTeams(res.data);\n      return {data: res.data, success: true};\n    })\n    .catch((e) => {\n      return {success: false, message: e.message};\n    });\n};\n\nexport const getPlayer = async (setImageURL, name) => {\n  console.log(\"KDJFHJKDHJKFDHKJDFHJKDFHKJDFHDSKJF\")\n  let name_arr = name.split(\" \");\n  console.log(\"first name\", name_arr[0]);\n  console.log(\"last name\", name_arr[1]);\n  const url = `https://nba-players.herokuapp.com/players/${name_arr[1]}/${name_arr[0]}`;\n  console.log(url);\n  return axios\n    .get(url)\n    .then((res) => {\n      setImageURL(url);\n      console.log(res.data)\n      return {data: res.data, success: true};\n    })\n    .catch((e) => {\n      console.log(\"ERROR\", e);\n      return {success: false, message: e.message};\n    });\n};","import { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport { app_background } from \"./data/markdown\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Form from \"react-bootstrap/Form\";\n\n// import your custom data fetching function\n// TODO: add a data fetching function to the api.js file in the endpoints folder\n// import { getAllAvatarCharacters } from \"./data/endpoints\";\nimport { getAllNBATeams, getPlayer } from \"./data/endpoints\";\n\nconst App = () => {\n  // const [characters, setCharacters] = useState(null);\n  const [teams, setTeams] = useState(null);\n  const [name, setName] = useState(\"\");\n  const [imageURL, setImageURL] = useState(\"\");\n\n  /**\n   * TODO: modify this useEffect to pass as many params as you want\n   * - at minimum, pass your state setting function from above\n   * - you could also create more state variables to handle multiple params for your endpoint / user input\n   */\n  // useEffect(() => {\n  //   if (!characters) {\n  //     // if our characters is null, fetch some data!\n  //     getAllAvatarCharacters(setCharacters);\n  //   }\n  //   // don't forget to add every state variable you're monitoring to this array!\n  // }, [characters]);\n\n  useEffect(() => {\n    if (!teams) {\n      // if our characters is null, fetch some data!\n      getAllNBATeams(setTeams);\n    }\n    // don't forget to add every state variable you're monitoring to this array!\n  }, [teams]);\n\n  const getImage = (e) => {\n    e.preventDefault();\n    console.log(\"EEEEEE\")\n    getPlayer(setImageURL, name)\n  }\n\n  const changeName = (e) => {\n    e.preventDefault();\n    setName(e.target.value);\n  }\n\n  // return (\n  //   <div className=\"home\">\n  //     <div id=\"content\">\n  //       <ReactMarkdown className=\"background\" source={app_background} />\n\n  //       <div className=\"container\">\n  //         {/**\n  //          * Code explanation:\n  //          * Feel free to delete this or modify this. It is creating a grid using Boostrap classes\n  //          * - map has a 2nd parameter that tells you the elements index in the array, its good practice to pass this as the key prop\n  //          * - remember to print to console the data you fetch, it will definitely have different properties & values than my data!\n  //          */}\n  //         <div className=\"row justify-content-md-center\">\n  //           {/**\n  //            * - TODO: use a ternary to add conditional react elements\n  //            * - in this case, if characters is null, it displays \"No characters\"\n  //            * - otherwise, it maps through characters and renders info for each person!\n  //            */}\n  //           {characters ? (\n  //             characters.map((char, idx) => (\n  //               <div className=\"col-3 character\" key={idx}>\n  //                 {/* Displays name of each character */}\n  //                 <h2 className=\"name\">{char.name}</h2>\n  //                 {/* Displays image of each character + adds an additional class (character-img) so I can customize in my CSS file*/}\n  //                 <img\n  //                   src={char.photoUrl}\n  //                   className=\"img-fluid character-img\"\n  //                   alt=\"character icon\"\n  //                 ></img>\n  //                 <div className=\"character-description\">\n  //                   {/* Displays list of each character's allies (stored in an array within the char object called allies) */}\n  //                   <h4>Allies</h4>\n  //                   {char.allies.map(\n  //                     (a, idx) => a.length > 1 && <li key={idx}>{a}</li>\n  //                   )}\n  //                 </div>\n  //               </div>\n  //             ))\n  //           ) : (\n  //             <div>No Characters</div>\n  //           )}\n  //         </div>\n  //       </div>\n  //     </div>\n  //   </div>\n  // );\n  return (\n    <div className=\"home\">\n      <div id=\"content\">\n        <ReactMarkdown className=\"background\" source={app_background} />\n\n        <div className=\"row justify-content-md-center\">\n          <Form>\n            <Form.Group controlId=\"form-input justify-content-center\">\n              {/**\n               * TODO: pass 2 props to the FormControl element\n               * 1. placeholder (string) -> pass a string explaining what the input is for (ex: \"Enter a task!\")\n               * 2. onChange (function) -> pass one of the functions above that handles the user's input\n               */}\n              <FormControl placeholder={\"Type a Player's Name\" } onChange={changeName} />\n              <InputGroup.Append className=\"justify-content-center p-2\">\n                {/** TODO: Add a prop & add some text to the button\n                 * 1. onClick (function) -> pass one of the functions above that handles a task being added\n                 * 2. Add text between the open and closing button tags, describing what the button should say\n                 */}\n                <Button onClick={getImage} type={\"submit\"} variant='danger' >Enter in a player name!</Button>\n              </InputGroup.Append>\n            </Form.Group>\n          </Form>\n        </div>\n        \n        <div className=\"row justify-content-md-center\">\n          {imageURL !== \"\" ? (\n            <img src={imageURL}></img>\n          ): (\n            <div>No image</div>\n          )}\n        </div>\n\n        <div className=\"container\">\n          {/**\n           * Code explanation:\n           * Feel free to delete this or modify this. It is creating a grid using Boostrap classes\n           * - map has a 2nd parameter that tells you the elements index in the array, its good practice to pass this as the key prop\n           * - remember to print to console the data you fetch, it will definitely have different properties & values than my data!\n           */}\n          <div className=\"row justify-content-md-center\">\n            {/**\n             * - TODO: use a ternary to add conditional react elements\n             * - in this case, if characters is null, it displays \"No characters\"\n             * - otherwise, it maps through characters and renders info for each person!\n             */}\n             \n            {teams ? (\n              teams.data.map((team, idx) => (\n                <div className=\"col-4 character\" key={idx}>\n                  <h2 className=\"name\">{team.full_name} ({team.abbreviation})</h2>\n                  <div className=\"text-center\">\n                    Conference: {team.conference}\n                    <br />\n                    Division: {team.division}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div>No Teams</div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const app_background = `Get all NBA Teams and basic information about them here or search up images of players!`;\n\nexport default app_background;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\n\nimport { Header, Footer } from \"./components\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst Index = () => (\n  <div className=\"main\">\n    <BrowserRouter>\n      <Header />\n      <div>\n        <Route path=\"/\" component={App} />\n      </div>\n      <Footer />\n    </BrowserRouter>\n  </div>\n);\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n"],"sourceRoot":""}